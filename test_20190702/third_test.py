# -*- coding:utf-8 -*-
"""
# 概要
Rabbit社の社長はウサギが大好きで、 社内で1匹のウサギを飼育することにしました。
ウサギが人参を好むことは広く知られています。 また、ウサギに詳しい社員によると、 人参は糖分が多いため与えすぎるのは良くないようです。

そこで、人参は1日1本だけ与えることにし、 特に糖分が許容範囲内で質量が大きい人参を選ぶことにしました。

プログラマーであるあなたはRabbit社の依頼を受け、 1 から N で番号付けられた N 個の人参のデータを入力として、 糖分が許容範囲内で質量の最も大きい人参を見つけるプログラムを作成することになりました。

糖分には基準値『S』と許容誤差 『p』 があり、 糖分が S - p 以上 S + p 以下ならば許容範囲内となります。
また、糖分が許容範囲内で質量の最も大きい人参 が複数ある場合は、それらのうち番号の最も小さいものを知ることができれば十分です。

# 例えば、入力例1は以下のようになっています。

人参のデータ数(N): 3
糖分の目安(S): 5
許容誤差(p): 2

1つ目: 質量 = 8, 糖分 = 10
2つ目: 質量 = 7, 糖分 = 6 << 基準値内、質量が最も大きい、番号が一番小さい
3つ目: 質量 = 7, 糖分 = 4 << 基準値内、質量が最も大きい

出力すべき値は 『2』 となります。


# 入力される値
入力は以下のフォーマットで与えられます。
```
N S p
m_1 s_1
...
m_N s_N

```
1行目には3つの整数 N, S, p が入力されます。 それぞれ、人参のデータの数、目安となる糖分、許容誤差を表します。

続く N 行には N 個の人参のデータが与えられます。
ここで、人参には 1 から N の番号が付いているものとし、 m_i、s_i はそれぞれ番号 i の人参の質量、糖分を表す整数です。

# 期待する出力
糖分が許容範囲内で質量の最も大きい人参の番号を1行に出力してください。

糖分が許容範囲内で質量の最も大きい人参が複数ある場合は、それらの番号のうち最も小さいものを出力してください。
もし、糖分が許容範囲内で質量の最も大きい人参が見つからなかった場合は、"not found"と1行に出力してください。

また、最後は改行し、余計な文字、空行を含んではいけません。

# 条件
すべてのテストケースで以下の条件を満たします。

```
・3 ≦ N ≦ 100
・1 ≦ S ≦ 100
・0 ≦ p ≦ 10
・1 ≦ m_i ≦ 100
・1 ≦ s_i ≦ 100
```

# 入出力例
## 入出力例1
```入力
3 5 2
8 10
7 6
7 4
```

```出力
2
```

## 入出力例2
```入力
3 64 10
84 75
73 53
56 34
```

```出力
not found
```
"""


def found_carrot(carrots, s, p):
    # ここに書いてください
    ret = []
    for carrot in carrots:
        if s-p <= carrot[1] <= s+p:
            ret.append(carrot[0])
        else:
            ret.append(0)
    if max(ret) == 0:
        return 'not found'
    else:
        return ret.index(max(ret)) + 1


if __name__ == '__main__':
    # N・・・人参のデータの数
    # S・・・目安となる糖分
    # p・・・許容誤差
    n, s, p = (int(x) for x in input().split())
    carrots = [[int(x) for x in input().split()] for i in range(n)]
    print(found_carrot(carrots, s, p))
